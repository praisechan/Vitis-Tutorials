// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter2DKernel_AXIBursts2PixelStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        src,
        width,
        height,
        stride,
        src_pixels_din,
        src_pixels_num_data_valid,
        src_pixels_fifo_cap,
        src_pixels_full_n,
        src_pixels_write,
        stride_c_din,
        stride_c_num_data_valid,
        stride_c_fifo_cap,
        stride_c_full_n,
        stride_c_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [255:0] m_axi_gmem0_WDATA;
output  [31:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [255:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [63:0] src;
input  [31:0] width;
input  [31:0] height;
input  [31:0] stride;
output  [7:0] src_pixels_din;
input  [6:0] src_pixels_num_data_valid;
input  [6:0] src_pixels_fifo_cap;
input   src_pixels_full_n;
output   src_pixels_write;
output  [31:0] stride_c_din;
input  [2:0] stride_c_num_data_valid;
input  [2:0] stride_c_fifo_cap;
input   stride_c_full_n;
output   stride_c_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_ARVALID;
reg[63:0] m_axi_gmem0_ARADDR;
reg[0:0] m_axi_gmem0_ARID;
reg[31:0] m_axi_gmem0_ARLEN;
reg[2:0] m_axi_gmem0_ARSIZE;
reg[1:0] m_axi_gmem0_ARBURST;
reg[1:0] m_axi_gmem0_ARLOCK;
reg[3:0] m_axi_gmem0_ARCACHE;
reg[2:0] m_axi_gmem0_ARPROT;
reg[3:0] m_axi_gmem0_ARQOS;
reg[3:0] m_axi_gmem0_ARREGION;
reg[0:0] m_axi_gmem0_ARUSER;
reg m_axi_gmem0_RREADY;
reg src_pixels_write;
reg stride_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem0_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    stride_c_blk_n;
wire   [15:0] trunc_ln90_3_fu_276_p1;
reg   [15:0] trunc_ln90_3_reg_670;
wire   [11:0] loopWidth_fu_294_p4;
reg   [11:0] loopWidth_reg_675;
wire   [31:0] zext_ln25_1_fu_304_p1;
reg   [31:0] zext_ln25_1_reg_681;
wire   [0:0] icmp_ln28_fu_312_p2;
reg   [0:0] icmp_ln28_reg_686;
wire   [11:0] sub31_i_fu_336_p2;
reg   [11:0] sub31_i_reg_691;
wire   [0:0] cmp34_i_fu_342_p2;
reg   [0:0] cmp34_i_reg_696;
wire   [0:0] icmp_fu_358_p2;
reg   [0:0] icmp_reg_701;
wire   [0:0] cmp34_2_i_fu_364_p2;
reg   [0:0] cmp34_2_i_reg_706;
wire   [0:0] icmp19_fu_380_p2;
reg   [0:0] icmp19_reg_711;
wire   [0:0] cmp34_4_i_fu_386_p2;
reg   [0:0] cmp34_4_i_reg_716;
wire   [0:0] cmp34_5_i_fu_392_p2;
reg   [0:0] cmp34_5_i_reg_721;
wire   [0:0] cmp34_6_i_fu_398_p2;
reg   [0:0] cmp34_6_i_reg_726;
wire   [0:0] icmp22_fu_414_p2;
reg   [0:0] icmp22_reg_731;
wire   [0:0] cmp34_8_i_fu_420_p2;
reg   [0:0] cmp34_8_i_reg_736;
wire   [0:0] cmp34_9_i_fu_426_p2;
reg   [0:0] cmp34_9_i_reg_741;
wire   [0:0] cmp34_10_i_fu_432_p2;
reg   [0:0] cmp34_10_i_reg_746;
wire   [0:0] cmp34_11_i_fu_438_p2;
reg   [0:0] cmp34_11_i_reg_751;
wire   [0:0] cmp34_12_i_fu_444_p2;
reg   [0:0] cmp34_12_i_reg_756;
wire   [0:0] cmp34_13_i_fu_450_p2;
reg   [0:0] cmp34_13_i_reg_761;
wire   [0:0] cmp34_14_i_fu_456_p2;
reg   [0:0] cmp34_14_i_reg_766;
wire   [0:0] icmp25_fu_472_p2;
reg   [0:0] icmp25_reg_771;
wire   [0:0] cmp34_16_i_fu_478_p2;
reg   [0:0] cmp34_16_i_reg_776;
wire   [0:0] cmp34_17_i_fu_484_p2;
reg   [0:0] cmp34_17_i_reg_781;
wire   [0:0] cmp34_18_i_fu_490_p2;
reg   [0:0] cmp34_18_i_reg_786;
wire   [0:0] cmp34_19_i_fu_496_p2;
reg   [0:0] cmp34_19_i_reg_791;
wire   [0:0] cmp34_20_i_fu_502_p2;
reg   [0:0] cmp34_20_i_reg_796;
wire   [0:0] cmp34_21_i_fu_508_p2;
reg   [0:0] cmp34_21_i_reg_801;
wire   [0:0] cmp34_22_i_fu_514_p2;
reg   [0:0] cmp34_22_i_reg_806;
wire   [0:0] cmp34_23_i_fu_520_p2;
reg   [0:0] cmp34_23_i_reg_811;
wire   [0:0] cmp34_24_i_fu_526_p2;
reg   [0:0] cmp34_24_i_reg_816;
wire   [0:0] cmp34_25_i_fu_532_p2;
reg   [0:0] cmp34_25_i_reg_821;
wire   [0:0] cmp34_26_i_fu_538_p2;
reg   [0:0] cmp34_26_i_reg_826;
wire   [0:0] cmp34_27_i_fu_544_p2;
reg   [0:0] cmp34_27_i_reg_831;
wire   [0:0] cmp34_28_i_fu_550_p2;
reg   [0:0] cmp34_28_i_reg_836;
wire   [0:0] cmp34_29_i_fu_556_p2;
reg   [0:0] cmp34_29_i_reg_841;
wire   [0:0] cmp34_30_i_fu_562_p2;
reg   [0:0] cmp34_30_i_reg_846;
wire   [26:0] div14_cast_i_fu_568_p1;
reg   [26:0] div14_cast_i_reg_851;
reg   [58:0] trunc_ln2_reg_859;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_585_p2;
reg   [5:0] buff_V_address0;
reg    buff_V_ce0;
reg    buff_V_we0;
wire   [255:0] buff_V_q0;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_idle;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWVALID;
wire   [63:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWADDR;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWID;
wire   [31:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLEN;
wire   [2:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWSIZE;
wire   [1:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWBURST;
wire   [1:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLOCK;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWCACHE;
wire   [2:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWPROT;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWQOS;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWREGION;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWUSER;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WVALID;
wire   [255:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WDATA;
wire   [31:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WSTRB;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WLAST;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WID;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WUSER;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID;
wire   [63:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID;
wire   [31:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN;
wire   [2:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE;
wire   [1:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST;
wire   [1:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE;
wire   [2:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS;
wire   [3:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION;
wire   [0:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_BREADY;
wire   [5:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0;
wire   [255:0] grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n;
wire    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_idle;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready;
wire   [7:0] grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write;
wire   [5:0] grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n;
wire    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n;
reg    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
reg    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire  signed [63:0] sext_ln38_fu_641_p1;
reg   [15:0] y_fu_172;
wire   [15:0] y_6_fu_590_p2;
reg    ap_block_state1;
reg   [26:0] yoffset_fu_176;
wire   [26:0] add_ln43_fu_626_p2;
wire   [15:0] trunc_ln90_fu_272_p1;
wire   [16:0] zext_ln25_fu_284_p1;
wire   [16:0] add_ln25_fu_288_p2;
wire   [4:0] remainPix_fu_280_p1;
wire   [5:0] zext_ln27_fu_308_p1;
wire   [5:0] remainPix_2_fu_318_p3;
wire   [4:0] tmp_fu_348_p4;
wire   [3:0] tmp_9_fu_370_p4;
wire   [2:0] tmp_10_fu_404_p4;
wire   [1:0] tmp_11_fu_462_p4;
wire   [10:0] div14_i_fu_326_p4;
wire   [31:0] shl_ln_fu_599_p3;
wire   [63:0] zext_ln38_fu_607_p1;
wire   [63:0] add_ln38_fu_611_p2;
reg   [75:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ext_blocking_cur_n;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_wait_1;
reg    ap_sub_ext_blocking_1;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_sub_str_blocking_1;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
reg    ap_sub_int_blocking_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg = 1'b0;
#0 grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg = 1'b0;
end

Filter2DKernel_AXIBursts2PixelStream_buff_V_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
buff_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buff_V_address0),
    .ce0(buff_V_ce0),
    .we0(buff_V_we0),
    .d0(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0),
    .q0(buff_V_q0)
);

Filter2DKernel_AXIBursts2PixelStream_Pipeline_aximm2bytes grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start),
    .ap_done(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done),
    .ap_idle(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_idle),
    .ap_ready(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready),
    .m_axi_gmem0_AWVALID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWVALID),
    .m_axi_gmem0_AWREADY(1'b0),
    .m_axi_gmem0_AWADDR(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWADDR),
    .m_axi_gmem0_AWID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWID),
    .m_axi_gmem0_AWLEN(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLEN),
    .m_axi_gmem0_AWSIZE(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWSIZE),
    .m_axi_gmem0_AWBURST(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWBURST),
    .m_axi_gmem0_AWLOCK(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLOCK),
    .m_axi_gmem0_AWCACHE(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWCACHE),
    .m_axi_gmem0_AWPROT(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWPROT),
    .m_axi_gmem0_AWQOS(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWQOS),
    .m_axi_gmem0_AWREGION(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWREGION),
    .m_axi_gmem0_AWUSER(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWUSER),
    .m_axi_gmem0_WVALID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WVALID),
    .m_axi_gmem0_WREADY(1'b0),
    .m_axi_gmem0_WDATA(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WDATA),
    .m_axi_gmem0_WSTRB(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WSTRB),
    .m_axi_gmem0_WLAST(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WLAST),
    .m_axi_gmem0_WID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WID),
    .m_axi_gmem0_WUSER(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WUSER),
    .m_axi_gmem0_ARVALID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID),
    .m_axi_gmem0_ARREADY(m_axi_gmem0_ARREADY),
    .m_axi_gmem0_ARADDR(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR),
    .m_axi_gmem0_ARID(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID),
    .m_axi_gmem0_ARLEN(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN),
    .m_axi_gmem0_ARSIZE(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE),
    .m_axi_gmem0_ARBURST(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST),
    .m_axi_gmem0_ARLOCK(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK),
    .m_axi_gmem0_ARCACHE(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE),
    .m_axi_gmem0_ARPROT(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT),
    .m_axi_gmem0_ARQOS(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS),
    .m_axi_gmem0_ARREGION(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION),
    .m_axi_gmem0_ARUSER(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER),
    .m_axi_gmem0_RVALID(m_axi_gmem0_RVALID),
    .m_axi_gmem0_RREADY(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY),
    .m_axi_gmem0_RDATA(m_axi_gmem0_RDATA),
    .m_axi_gmem0_RLAST(m_axi_gmem0_RLAST),
    .m_axi_gmem0_RID(m_axi_gmem0_RID),
    .m_axi_gmem0_RFIFONUM(m_axi_gmem0_RFIFONUM),
    .m_axi_gmem0_RUSER(m_axi_gmem0_RUSER),
    .m_axi_gmem0_RRESP(m_axi_gmem0_RRESP),
    .m_axi_gmem0_BVALID(1'b0),
    .m_axi_gmem0_BREADY(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_BREADY),
    .m_axi_gmem0_BRESP(2'd0),
    .m_axi_gmem0_BID(1'd0),
    .m_axi_gmem0_BUSER(1'd0),
    .sext_ln38(trunc_ln2_reg_859),
    .loopWidth(loopWidth_reg_675),
    .buff_V_address0(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0),
    .buff_V_ce0(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0),
    .buff_V_we0(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0),
    .buff_V_d0(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0),
    .ap_ext_blocking_n(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n),
    .ap_int_blocking_n(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n)
);

Filter2DKernel_AXIBursts2PixelStream_Pipeline_bytes2pixels grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start),
    .ap_done(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done),
    .ap_idle(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_idle),
    .ap_ready(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready),
    .src_pixels_din(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din),
    .src_pixels_num_data_valid(7'd0),
    .src_pixels_fifo_cap(7'd0),
    .src_pixels_full_n(src_pixels_full_n),
    .src_pixels_write(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write),
    .loopWidth(loopWidth_reg_675),
    .icmp_ln28(icmp_ln28_reg_686),
    .cmp34_30_i(cmp34_30_i_reg_846),
    .cmp34_29_i(cmp34_29_i_reg_841),
    .cmp34_28_i(cmp34_28_i_reg_836),
    .cmp34_27_i(cmp34_27_i_reg_831),
    .cmp34_26_i(cmp34_26_i_reg_826),
    .cmp34_25_i(cmp34_25_i_reg_821),
    .cmp34_24_i(cmp34_24_i_reg_816),
    .cmp34_23_i(cmp34_23_i_reg_811),
    .cmp34_22_i(cmp34_22_i_reg_806),
    .cmp34_21_i(cmp34_21_i_reg_801),
    .cmp34_20_i(cmp34_20_i_reg_796),
    .cmp34_19_i(cmp34_19_i_reg_791),
    .cmp34_18_i(cmp34_18_i_reg_786),
    .cmp34_17_i(cmp34_17_i_reg_781),
    .cmp34_16_i(cmp34_16_i_reg_776),
    .cmp34_15_i(icmp25_reg_771),
    .cmp34_14_i(cmp34_14_i_reg_766),
    .cmp34_13_i(cmp34_13_i_reg_761),
    .cmp34_12_i(cmp34_12_i_reg_756),
    .cmp34_11_i(cmp34_11_i_reg_751),
    .cmp34_10_i(cmp34_10_i_reg_746),
    .cmp34_9_i(cmp34_9_i_reg_741),
    .cmp34_8_i(cmp34_8_i_reg_736),
    .cmp34_7_i(icmp22_reg_731),
    .cmp34_6_i(cmp34_6_i_reg_726),
    .cmp34_5_i(cmp34_5_i_reg_721),
    .cmp34_4_i(cmp34_4_i_reg_716),
    .cmp34_3_i(icmp19_reg_711),
    .cmp34_2_i(cmp34_2_i_reg_706),
    .cmp34_1_i(icmp_reg_701),
    .buff_V_address0(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0),
    .buff_V_ce0(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0),
    .buff_V_q0(buff_V_q0),
    .sext_ln33(sub31_i_reg_691),
    .cmp34_i(cmp34_i_reg_696),
    .ap_ext_blocking_n(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n),
    .ap_int_blocking_n(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln33_fu_585_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state73)) begin
            grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= 1'b1;
        end else if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready == 1'b1)) begin
            grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state75)) begin
            grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= 1'b1;
        end else if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready == 1'b1)) begin
            grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_172 <= 16'd0;
    end else if (((icmp_ln33_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        y_fu_172 <= y_6_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        yoffset_fu_176 <= 27'd0;
    end else if (((icmp_ln33_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        yoffset_fu_176 <= add_ln43_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp34_10_i_reg_746 <= cmp34_10_i_fu_432_p2;
        cmp34_11_i_reg_751 <= cmp34_11_i_fu_438_p2;
        cmp34_12_i_reg_756 <= cmp34_12_i_fu_444_p2;
        cmp34_13_i_reg_761 <= cmp34_13_i_fu_450_p2;
        cmp34_14_i_reg_766 <= cmp34_14_i_fu_456_p2;
        cmp34_16_i_reg_776 <= cmp34_16_i_fu_478_p2;
        cmp34_17_i_reg_781 <= cmp34_17_i_fu_484_p2;
        cmp34_18_i_reg_786 <= cmp34_18_i_fu_490_p2;
        cmp34_19_i_reg_791 <= cmp34_19_i_fu_496_p2;
        cmp34_20_i_reg_796 <= cmp34_20_i_fu_502_p2;
        cmp34_21_i_reg_801 <= cmp34_21_i_fu_508_p2;
        cmp34_22_i_reg_806 <= cmp34_22_i_fu_514_p2;
        cmp34_23_i_reg_811 <= cmp34_23_i_fu_520_p2;
        cmp34_24_i_reg_816 <= cmp34_24_i_fu_526_p2;
        cmp34_25_i_reg_821 <= cmp34_25_i_fu_532_p2;
        cmp34_26_i_reg_826 <= cmp34_26_i_fu_538_p2;
        cmp34_27_i_reg_831 <= cmp34_27_i_fu_544_p2;
        cmp34_28_i_reg_836 <= cmp34_28_i_fu_550_p2;
        cmp34_29_i_reg_841 <= cmp34_29_i_fu_556_p2;
        cmp34_2_i_reg_706 <= cmp34_2_i_fu_364_p2;
        cmp34_30_i_reg_846 <= cmp34_30_i_fu_562_p2;
        cmp34_4_i_reg_716 <= cmp34_4_i_fu_386_p2;
        cmp34_5_i_reg_721 <= cmp34_5_i_fu_392_p2;
        cmp34_6_i_reg_726 <= cmp34_6_i_fu_398_p2;
        cmp34_8_i_reg_736 <= cmp34_8_i_fu_420_p2;
        cmp34_9_i_reg_741 <= cmp34_9_i_fu_426_p2;
        cmp34_i_reg_696 <= cmp34_i_fu_342_p2;
        div14_cast_i_reg_851[10 : 0] <= div14_cast_i_fu_568_p1[10 : 0];
        icmp19_reg_711 <= icmp19_fu_380_p2;
        icmp22_reg_731 <= icmp22_fu_414_p2;
        icmp25_reg_771 <= icmp25_fu_472_p2;
        icmp_ln28_reg_686 <= icmp_ln28_fu_312_p2;
        icmp_reg_701 <= icmp_fu_358_p2;
        loopWidth_reg_675 <= {{add_ln25_fu_288_p2[16:5]}};
        sub31_i_reg_691 <= sub31_i_fu_336_p2;
        trunc_ln90_3_reg_670 <= trunc_ln90_3_fu_276_p1;
        zext_ln25_1_reg_681[11 : 0] <= zext_ln25_1_fu_304_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln2_reg_859 <= {{add_ln38_fu_611_p2[63:5]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln33_fu_585_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_ext_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1))) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_int_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1))) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_585_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_wait_1 & ap_sub_str_blocking_1) == 1'b1) & ((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1))) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_1 = 1'b1;
    end else begin
        ap_sub_ext_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_1 = 1'b1;
    end else begin
        ap_sub_int_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_1 = 1'b1;
    end else begin
        ap_sub_str_blocking_1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state74 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state76 == ap_CS_fsm)) begin
        ap_wait_1 = 1'b1;
    end else begin
        ap_wait_1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        buff_V_address0 = grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        buff_V_address0 = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0;
    end else begin
        buff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        buff_V_ce0 = grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        buff_V_ce0 = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0;
    end else begin
        buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        buff_V_we0 = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0;
    end else begin
        buff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_ARREADY == 1'b1))) begin
        m_axi_gmem0_ARADDR = sext_ln38_fu_641_p1;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARADDR = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR;
    end else begin
        m_axi_gmem0_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARBURST = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST;
    end else begin
        m_axi_gmem0_ARBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARCACHE = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE;
    end else begin
        m_axi_gmem0_ARCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARID = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID;
    end else begin
        m_axi_gmem0_ARID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_ARREADY == 1'b1))) begin
        m_axi_gmem0_ARLEN = zext_ln25_1_reg_681;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARLEN = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN;
    end else begin
        m_axi_gmem0_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARLOCK = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK;
    end else begin
        m_axi_gmem0_ARLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARPROT = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT;
    end else begin
        m_axi_gmem0_ARPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARQOS = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS;
    end else begin
        m_axi_gmem0_ARQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARREGION = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION;
    end else begin
        m_axi_gmem0_ARREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARSIZE = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE;
    end else begin
        m_axi_gmem0_ARSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARUSER = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER;
    end else begin
        m_axi_gmem0_ARUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_ARREADY == 1'b1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_ARVALID = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73))) begin
        m_axi_gmem0_RREADY = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        src_pixels_write = grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write;
    end else begin
        src_pixels_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_c_blk_n = stride_c_full_n;
    end else begin
        stride_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_c_write = 1'b1;
    end else begin
        stride_c_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_585_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_gmem0_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_288_p2 = (zext_ln25_fu_284_p1 + 17'd31);

assign add_ln38_fu_611_p2 = (zext_ln38_fu_607_p1 + src);

assign add_ln43_fu_626_p2 = (div14_cast_i_reg_851 + yoffset_fu_176);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (stride_c_full_n == 1'b0));
end

assign ap_ext_blocking_cur_n = gmem0_blk_n_AR;

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & ap_ext_blocking_cur_n);

assign ap_int_blocking_cur_n = stride_c_blk_n;

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign cmp34_10_i_fu_432_p2 = ((remainPix_2_fu_318_p3 > 6'd10) ? 1'b1 : 1'b0);

assign cmp34_11_i_fu_438_p2 = ((remainPix_2_fu_318_p3 > 6'd11) ? 1'b1 : 1'b0);

assign cmp34_12_i_fu_444_p2 = ((remainPix_2_fu_318_p3 > 6'd12) ? 1'b1 : 1'b0);

assign cmp34_13_i_fu_450_p2 = ((remainPix_2_fu_318_p3 > 6'd13) ? 1'b1 : 1'b0);

assign cmp34_14_i_fu_456_p2 = ((remainPix_2_fu_318_p3 > 6'd14) ? 1'b1 : 1'b0);

assign cmp34_16_i_fu_478_p2 = ((remainPix_2_fu_318_p3 > 6'd16) ? 1'b1 : 1'b0);

assign cmp34_17_i_fu_484_p2 = ((remainPix_2_fu_318_p3 > 6'd17) ? 1'b1 : 1'b0);

assign cmp34_18_i_fu_490_p2 = ((remainPix_2_fu_318_p3 > 6'd18) ? 1'b1 : 1'b0);

assign cmp34_19_i_fu_496_p2 = ((remainPix_2_fu_318_p3 > 6'd19) ? 1'b1 : 1'b0);

assign cmp34_20_i_fu_502_p2 = ((remainPix_2_fu_318_p3 > 6'd20) ? 1'b1 : 1'b0);

assign cmp34_21_i_fu_508_p2 = ((remainPix_2_fu_318_p3 > 6'd21) ? 1'b1 : 1'b0);

assign cmp34_22_i_fu_514_p2 = ((remainPix_2_fu_318_p3 > 6'd22) ? 1'b1 : 1'b0);

assign cmp34_23_i_fu_520_p2 = ((remainPix_2_fu_318_p3 > 6'd23) ? 1'b1 : 1'b0);

assign cmp34_24_i_fu_526_p2 = ((remainPix_2_fu_318_p3 > 6'd24) ? 1'b1 : 1'b0);

assign cmp34_25_i_fu_532_p2 = ((remainPix_2_fu_318_p3 > 6'd25) ? 1'b1 : 1'b0);

assign cmp34_26_i_fu_538_p2 = ((remainPix_2_fu_318_p3 > 6'd26) ? 1'b1 : 1'b0);

assign cmp34_27_i_fu_544_p2 = ((remainPix_2_fu_318_p3 > 6'd27) ? 1'b1 : 1'b0);

assign cmp34_28_i_fu_550_p2 = ((remainPix_2_fu_318_p3 > 6'd28) ? 1'b1 : 1'b0);

assign cmp34_29_i_fu_556_p2 = ((remainPix_2_fu_318_p3 > 6'd29) ? 1'b1 : 1'b0);

assign cmp34_2_i_fu_364_p2 = ((remainPix_2_fu_318_p3 > 6'd2) ? 1'b1 : 1'b0);

assign cmp34_30_i_fu_562_p2 = ((remainPix_2_fu_318_p3 > 6'd30) ? 1'b1 : 1'b0);

assign cmp34_4_i_fu_386_p2 = ((remainPix_2_fu_318_p3 > 6'd4) ? 1'b1 : 1'b0);

assign cmp34_5_i_fu_392_p2 = ((remainPix_2_fu_318_p3 > 6'd5) ? 1'b1 : 1'b0);

assign cmp34_6_i_fu_398_p2 = ((remainPix_2_fu_318_p3 > 6'd6) ? 1'b1 : 1'b0);

assign cmp34_8_i_fu_420_p2 = ((remainPix_2_fu_318_p3 > 6'd8) ? 1'b1 : 1'b0);

assign cmp34_9_i_fu_426_p2 = ((remainPix_2_fu_318_p3 > 6'd9) ? 1'b1 : 1'b0);

assign cmp34_i_fu_342_p2 = ((remainPix_2_fu_318_p3 != 6'd0) ? 1'b1 : 1'b0);

assign div14_cast_i_fu_568_p1 = div14_i_fu_326_p4;

assign div14_i_fu_326_p4 = {{stride[15:5]}};

assign grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start = grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg;

assign grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start = grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg;

assign icmp19_fu_380_p2 = ((tmp_9_fu_370_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp22_fu_414_p2 = ((tmp_10_fu_404_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp25_fu_472_p2 = ((tmp_11_fu_462_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_fu_358_p2 = ((tmp_fu_348_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_312_p2 = ((remainPix_fu_280_p1 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_585_p2 = ((y_fu_172 == trunc_ln90_3_reg_670) ? 1'b1 : 1'b0);

assign loopWidth_fu_294_p4 = {{add_ln25_fu_288_p2[16:5]}};

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 256'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 32'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign remainPix_2_fu_318_p3 = ((icmp_ln28_fu_312_p2[0:0] == 1'b1) ? 6'd32 : zext_ln27_fu_308_p1);

assign remainPix_fu_280_p1 = width[4:0];

assign sext_ln38_fu_641_p1 = $signed(trunc_ln2_reg_859);

assign shl_ln_fu_599_p3 = {{yoffset_fu_176}, {5'd0}};

assign src_pixels_din = grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din;

assign stride_c_din = stride;

assign sub31_i_fu_336_p2 = ($signed(loopWidth_fu_294_p4) + $signed(12'd4095));

assign tmp_10_fu_404_p4 = {{remainPix_2_fu_318_p3[5:3]}};

assign tmp_11_fu_462_p4 = {{remainPix_2_fu_318_p3[5:4]}};

assign tmp_9_fu_370_p4 = {{remainPix_2_fu_318_p3[5:2]}};

assign tmp_fu_348_p4 = {{remainPix_2_fu_318_p3[5:1]}};

assign trunc_ln90_3_fu_276_p1 = height[15:0];

assign trunc_ln90_fu_272_p1 = width[15:0];

assign y_6_fu_590_p2 = (y_fu_172 + 16'd1);

assign zext_ln25_1_fu_304_p1 = loopWidth_fu_294_p4;

assign zext_ln25_fu_284_p1 = trunc_ln90_fu_272_p1;

assign zext_ln27_fu_308_p1 = remainPix_fu_280_p1;

assign zext_ln38_fu_607_p1 = shl_ln_fu_599_p3;

always @ (posedge ap_clk) begin
    zext_ln25_1_reg_681[31:12] <= 20'b00000000000000000000;
    div14_cast_i_reg_851[26:11] <= 16'b0000000000000000;
end

endmodule //Filter2DKernel_AXIBursts2PixelStream
