-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel_PixelStream2AXIBursts is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dst_pixels_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    dst_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    dst_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    dst_pixels_empty_n : IN STD_LOGIC;
    dst_pixels_read : OUT STD_LOGIC;
    width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    width_empty_n : IN STD_LOGIC;
    width_read : OUT STD_LOGIC;
    height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    height_empty_n : IN STD_LOGIC;
    height_read : OUT STD_LOGIC;
    stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    stride_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    stride_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    stride_empty_n : IN STD_LOGIC;
    stride_read : OUT STD_LOGIC;
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    dst_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dst_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dst_empty_n : IN STD_LOGIC;
    dst_read : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of Filter2DKernel_PixelStream2AXIBursts is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv17_1F : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal width_blk_n : STD_LOGIC;
    signal height_blk_n : STD_LOGIC;
    signal stride_blk_n : STD_LOGIC;
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal dst_blk_n : STD_LOGIC;
    signal dst_read_reg_674 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln90_1_fu_275_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln90_1_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal remainPix_fu_279_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal remainPix_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal loopWidth_reg_690 : STD_LOGIC_VECTOR (11 downto 0);
    signal div38_i_reg_698 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln77_1_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln77_1_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln80_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub15_i_fu_347_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub15_i_reg_713 : STD_LOGIC_VECTOR (11 downto 0);
    signal cmp17_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_i_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_2_i_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_2_i_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp15_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp15_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_4_i_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_4_i_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_5_i_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_5_i_reg_743 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_6_i_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_6_i_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp18_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp18_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_8_i_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_8_i_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_9_i_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_9_i_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_10_i_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_10_i_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_11_i_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_11_i_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_12_i_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_12_i_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_13_i_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_13_i_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_14_i_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_14_i_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp21_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp21_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_16_i_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_16_i_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_17_i_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_17_i_reg_803 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_18_i_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_18_i_reg_808 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_19_i_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_19_i_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_20_i_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_20_i_reg_818 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_21_i_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_21_i_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_22_i_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_22_i_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_23_i_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_23_i_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_24_i_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_24_i_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_25_i_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_25_i_reg_843 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_26_i_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_26_i_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_27_i_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_27_i_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_28_i_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_28_i_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_29_i_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_29_i_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_30_i_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp17_30_i_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal div38_cast_i_fu_578_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal div38_cast_i_reg_873 : STD_LOGIC_VECTOR (26 downto 0);
    signal pixel_load_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln86_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_886 : STD_LOGIC_VECTOR (58 downto 0);
    signal buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_V_ce0 : STD_LOGIC;
    signal buff_V_we0 : STD_LOGIC;
    signal buff_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_idle : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ready : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_dst_pixels_read : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_ce0 : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_we0 : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out_ap_vld : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ext_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_str_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_int_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_idle : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ready : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_ce0 : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ext_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_str_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_int_blocking_n : STD_LOGIC;
    signal grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal pixel_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln102_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal y_fu_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_2_fu_589_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal yoffset_fu_180 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln107_fu_628_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln90_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln77_fu_283_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln77_fu_287_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln79_fu_331_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal remainPix_1_fu_339_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_358_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_380_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_414_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_472_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln91_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln91_fu_613_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_wait_1 : STD_LOGIC;
    signal ap_sub_ext_blocking_1 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_sub_str_blocking_1 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_sub_int_blocking_1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2DKernel_PixelStream2AXIBursts_Pipeline_pixels2bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_pixels_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_empty_n : IN STD_LOGIC;
        dst_pixels_read : OUT STD_LOGIC;
        pixel : IN STD_LOGIC_VECTOR (7 downto 0);
        loopWidth : IN STD_LOGIC_VECTOR (11 downto 0);
        buff_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buff_V_ce0 : OUT STD_LOGIC;
        buff_V_we0 : OUT STD_LOGIC;
        buff_V_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        icmp_ln80 : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_30_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_29_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_28_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_27_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_26_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_25_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_24_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_23_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_22_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_21_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_20_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_19_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_18_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_17_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_16_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_15_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_14_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_13_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_12_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_11_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_10_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_9_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_8_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_7_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_6_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_5_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_4_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_3_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_2_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp17_1_i : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln86 : IN STD_LOGIC_VECTOR (11 downto 0);
        cmp17_i : IN STD_LOGIC_VECTOR (0 downto 0);
        pixel_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
        pixel_1_out_ap_vld : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_PixelStream2AXIBursts_Pipeline_bytes2aximm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln102 : IN STD_LOGIC_VECTOR (58 downto 0);
        loopWidth : IN STD_LOGIC_VECTOR (11 downto 0);
        buff_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buff_V_ce0 : OUT STD_LOGIC;
        buff_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_PixelStream2AXIBursts_buff_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    buff_V_U : component Filter2DKernel_PixelStream2AXIBursts_buff_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_V_address0,
        ce0 => buff_V_ce0,
        we0 => buff_V_we0,
        d0 => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_d0,
        q0 => buff_V_q0);

    grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219 : component Filter2DKernel_PixelStream2AXIBursts_Pipeline_pixels2bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start,
        ap_done => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done,
        ap_idle => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_idle,
        ap_ready => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ready,
        dst_pixels_dout => dst_pixels_dout,
        dst_pixels_num_data_valid => ap_const_lv7_0,
        dst_pixels_fifo_cap => ap_const_lv7_0,
        dst_pixels_empty_n => dst_pixels_empty_n,
        dst_pixels_read => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_dst_pixels_read,
        pixel => pixel_load_reg_881,
        loopWidth => loopWidth_reg_690,
        buff_V_address0 => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_address0,
        buff_V_ce0 => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_ce0,
        buff_V_we0 => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_we0,
        buff_V_d0 => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_d0,
        icmp_ln80 => icmp_ln80_reg_708,
        cmp17_30_i => cmp17_30_i_reg_868,
        cmp17_29_i => cmp17_29_i_reg_863,
        cmp17_28_i => cmp17_28_i_reg_858,
        cmp17_27_i => cmp17_27_i_reg_853,
        cmp17_26_i => cmp17_26_i_reg_848,
        cmp17_25_i => cmp17_25_i_reg_843,
        cmp17_24_i => cmp17_24_i_reg_838,
        cmp17_23_i => cmp17_23_i_reg_833,
        cmp17_22_i => cmp17_22_i_reg_828,
        cmp17_21_i => cmp17_21_i_reg_823,
        cmp17_20_i => cmp17_20_i_reg_818,
        cmp17_19_i => cmp17_19_i_reg_813,
        cmp17_18_i => cmp17_18_i_reg_808,
        cmp17_17_i => cmp17_17_i_reg_803,
        cmp17_16_i => cmp17_16_i_reg_798,
        cmp17_15_i => icmp21_reg_793,
        cmp17_14_i => cmp17_14_i_reg_788,
        cmp17_13_i => cmp17_13_i_reg_783,
        cmp17_12_i => cmp17_12_i_reg_778,
        cmp17_11_i => cmp17_11_i_reg_773,
        cmp17_10_i => cmp17_10_i_reg_768,
        cmp17_9_i => cmp17_9_i_reg_763,
        cmp17_8_i => cmp17_8_i_reg_758,
        cmp17_7_i => icmp18_reg_753,
        cmp17_6_i => cmp17_6_i_reg_748,
        cmp17_5_i => cmp17_5_i_reg_743,
        cmp17_4_i => cmp17_4_i_reg_738,
        cmp17_3_i => icmp15_reg_733,
        cmp17_2_i => cmp17_2_i_reg_728,
        cmp17_1_i => icmp_reg_723,
        sext_ln86 => sub15_i_reg_713,
        cmp17_i => cmp17_i_reg_718,
        pixel_1_out => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out,
        pixel_1_out_ap_vld => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out_ap_vld,
        ap_ext_blocking_n => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ext_blocking_n,
        ap_str_blocking_n => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_str_blocking_n,
        ap_int_blocking_n => grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_int_blocking_n);

    grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262 : component Filter2DKernel_PixelStream2AXIBursts_Pipeline_bytes2aximm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start,
        ap_done => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done,
        ap_idle => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_idle,
        ap_ready => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ready,
        m_axi_gmem1_AWVALID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => m_axi_gmem1_BRESP,
        m_axi_gmem1_BID => m_axi_gmem1_BID,
        m_axi_gmem1_BUSER => m_axi_gmem1_BUSER,
        sext_ln102 => trunc_ln1_reg_886,
        loopWidth => loopWidth_reg_690,
        buff_V_address0 => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_address0,
        buff_V_ce0 => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_ce0,
        buff_V_q0 => buff_V_q0,
        ap_ext_blocking_n => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ext_blocking_n,
        ap_str_blocking_n => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_str_blocking_n,
        ap_int_blocking_n => grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln86_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ready = ap_const_logic_1)) then 
                    grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ready = ap_const_logic_1)) then 
                    grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pixel_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pixel_fu_172 <= ap_const_lv8_0;
            elsif (((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                pixel_fu_172 <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_pixel_1_out;
            end if; 
        end if;
    end process;

    y_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_176 <= ap_const_lv16_0;
            elsif (((icmp_ln86_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y_fu_176 <= y_2_fu_589_p2;
            end if; 
        end if;
    end process;

    yoffset_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yoffset_fu_180 <= ap_const_lv27_0;
            elsif (((icmp_ln86_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                yoffset_fu_180 <= add_ln107_fu_628_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp17_10_i_reg_768 <= cmp17_10_i_fu_442_p2;
                cmp17_11_i_reg_773 <= cmp17_11_i_fu_448_p2;
                cmp17_12_i_reg_778 <= cmp17_12_i_fu_454_p2;
                cmp17_13_i_reg_783 <= cmp17_13_i_fu_460_p2;
                cmp17_14_i_reg_788 <= cmp17_14_i_fu_466_p2;
                cmp17_16_i_reg_798 <= cmp17_16_i_fu_488_p2;
                cmp17_17_i_reg_803 <= cmp17_17_i_fu_494_p2;
                cmp17_18_i_reg_808 <= cmp17_18_i_fu_500_p2;
                cmp17_19_i_reg_813 <= cmp17_19_i_fu_506_p2;
                cmp17_20_i_reg_818 <= cmp17_20_i_fu_512_p2;
                cmp17_21_i_reg_823 <= cmp17_21_i_fu_518_p2;
                cmp17_22_i_reg_828 <= cmp17_22_i_fu_524_p2;
                cmp17_23_i_reg_833 <= cmp17_23_i_fu_530_p2;
                cmp17_24_i_reg_838 <= cmp17_24_i_fu_536_p2;
                cmp17_25_i_reg_843 <= cmp17_25_i_fu_542_p2;
                cmp17_26_i_reg_848 <= cmp17_26_i_fu_548_p2;
                cmp17_27_i_reg_853 <= cmp17_27_i_fu_554_p2;
                cmp17_28_i_reg_858 <= cmp17_28_i_fu_560_p2;
                cmp17_29_i_reg_863 <= cmp17_29_i_fu_566_p2;
                cmp17_2_i_reg_728 <= cmp17_2_i_fu_374_p2;
                cmp17_30_i_reg_868 <= cmp17_30_i_fu_572_p2;
                cmp17_4_i_reg_738 <= cmp17_4_i_fu_396_p2;
                cmp17_5_i_reg_743 <= cmp17_5_i_fu_402_p2;
                cmp17_6_i_reg_748 <= cmp17_6_i_fu_408_p2;
                cmp17_8_i_reg_758 <= cmp17_8_i_fu_430_p2;
                cmp17_9_i_reg_763 <= cmp17_9_i_fu_436_p2;
                cmp17_i_reg_718 <= cmp17_i_fu_352_p2;
                    div38_cast_i_reg_873(10 downto 0) <= div38_cast_i_fu_578_p1(10 downto 0);
                icmp15_reg_733 <= icmp15_fu_390_p2;
                icmp18_reg_753 <= icmp18_fu_424_p2;
                icmp21_reg_793 <= icmp21_fu_482_p2;
                icmp_ln80_reg_708 <= icmp_ln80_fu_334_p2;
                icmp_reg_723 <= icmp_fu_368_p2;
                sub15_i_reg_713 <= sub15_i_fu_347_p2;
                    zext_ln77_1_reg_703(11 downto 0) <= zext_ln77_1_fu_328_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                div38_i_reg_698 <= stride_dout(15 downto 5);
                dst_read_reg_674 <= dst_dout;
                loopWidth_reg_690 <= add_ln77_fu_287_p2(16 downto 5);
                remainPix_reg_684 <= remainPix_fu_279_p1;
                trunc_ln90_1_reg_679 <= trunc_ln90_1_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                pixel_load_reg_881 <= pixel_fu_172;
                trunc_ln1_reg_886 <= add_ln91_fu_613_p2(63 downto 5);
            end if;
        end if;
    end process;
    zext_ln77_1_reg_703(31 downto 12) <= "00000000000000000000";
    div38_cast_i_reg_873(26 downto 11) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, width_empty_n, height_empty_n, stride_empty_n, m_axi_gmem1_AWREADY, m_axi_gmem1_BVALID, dst_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state75, ap_CS_fsm_state3, icmp_ln86_fu_584_p2, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln86_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done = ap_const_logic_0) or (m_axi_gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem1_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln107_fu_628_p2 <= std_logic_vector(unsigned(div38_cast_i_reg_873) + unsigned(yoffset_fu_180));
    add_ln77_fu_287_p2 <= std_logic_vector(unsigned(zext_ln77_fu_283_p1) + unsigned(ap_const_lv17_1F));
    add_ln91_fu_613_p2 <= std_logic_vector(unsigned(dst_read_reg_674) + unsigned(zext_ln91_fu_609_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem1_AWREADY, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done)
    begin
        if (((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done = ap_const_logic_0) or (m_axi_gmem1_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;

    ap_ST_fsm_state75_blk_assign_proc : process(m_axi_gmem1_BVALID)
    begin
        if ((m_axi_gmem1_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state75_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state75_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln86_fu_584_p2)
    begin
        if (((icmp_ln86_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem1_blk_n_B and gmem1_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0, ap_wait_1, ap_sub_ext_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_ext_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1))) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (width_blk_n and stride_blk_n and height_blk_n and dst_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_int_blocking_0, ap_sub_int_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_int_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1))) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln86_fu_584_p2)
    begin
        if (((icmp_ln86_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_str_blocking_0, ap_sub_str_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_str_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1))) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ext_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_ext_blocking_1_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ext_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_int_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_1_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_int_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_str_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_1_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_str_blocking_n)
    begin
        if ((grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state5 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state7 = ap_CS_fsm)) then 
            ap_wait_1 <= ap_const_logic_1;
        else 
            ap_wait_1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_address0, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buff_V_address0 <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buff_V_address0 <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_address0;
        else 
            buff_V_address0 <= "XXXXXX";
        end if; 
    end process;


    buff_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_ce0, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buff_V_ce0 <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_buff_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buff_V_ce0 <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_ce0;
        else 
            buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_V_we0_assign_proc : process(ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buff_V_we0 <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_buff_V_we0;
        else 
            buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp17_10_i_fu_442_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_A)) else "0";
    cmp17_11_i_fu_448_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_B)) else "0";
    cmp17_12_i_fu_454_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_C)) else "0";
    cmp17_13_i_fu_460_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_D)) else "0";
    cmp17_14_i_fu_466_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_E)) else "0";
    cmp17_16_i_fu_488_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_10)) else "0";
    cmp17_17_i_fu_494_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_11)) else "0";
    cmp17_18_i_fu_500_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_12)) else "0";
    cmp17_19_i_fu_506_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_13)) else "0";
    cmp17_20_i_fu_512_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_14)) else "0";
    cmp17_21_i_fu_518_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_15)) else "0";
    cmp17_22_i_fu_524_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_16)) else "0";
    cmp17_23_i_fu_530_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_17)) else "0";
    cmp17_24_i_fu_536_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_18)) else "0";
    cmp17_25_i_fu_542_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_19)) else "0";
    cmp17_26_i_fu_548_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_1A)) else "0";
    cmp17_27_i_fu_554_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_1B)) else "0";
    cmp17_28_i_fu_560_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_1C)) else "0";
    cmp17_29_i_fu_566_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_1D)) else "0";
    cmp17_2_i_fu_374_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_2)) else "0";
    cmp17_30_i_fu_572_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_1E)) else "0";
    cmp17_4_i_fu_396_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_4)) else "0";
    cmp17_5_i_fu_402_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_5)) else "0";
    cmp17_6_i_fu_408_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_6)) else "0";
    cmp17_8_i_fu_430_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_8)) else "0";
    cmp17_9_i_fu_436_p2 <= "1" when (unsigned(remainPix_1_fu_339_p3) > unsigned(ap_const_lv6_9)) else "0";
    cmp17_i_fu_352_p2 <= "0" when (remainPix_1_fu_339_p3 = ap_const_lv6_0) else "1";
    div38_cast_i_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div38_i_reg_698),27));

    dst_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, dst_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_blk_n <= dst_empty_n;
        else 
            dst_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dst_pixels_read_assign_proc : process(ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_dst_pixels_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_pixels_read <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_dst_pixels_read;
        else 
            dst_pixels_read <= ap_const_logic_0;
        end if; 
    end process;


    dst_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dst_read <= ap_const_logic_1;
        else 
            dst_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem1_blk_n_AW <= m_axi_gmem1_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            gmem1_blk_n_B <= m_axi_gmem1_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_ap_start_reg;
    grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start <= grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_start_reg;

    height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_blk_n <= height_empty_n;
        else 
            height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_read <= ap_const_logic_1;
        else 
            height_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp15_fu_390_p2 <= "0" when (tmp_1_fu_380_p4 = ap_const_lv4_0) else "1";
    icmp18_fu_424_p2 <= "0" when (tmp_2_fu_414_p4 = ap_const_lv3_0) else "1";
    icmp21_fu_482_p2 <= "0" when (tmp_3_fu_472_p4 = ap_const_lv2_0) else "1";
    icmp_fu_368_p2 <= "0" when (tmp_fu_358_p4 = ap_const_lv5_0) else "1";
    icmp_ln80_fu_334_p2 <= "1" when (remainPix_reg_684 = ap_const_lv5_0) else "0";
    icmp_ln86_fu_584_p2 <= "1" when (y_fu_176 = trunc_ln90_1_reg_679) else "0";
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;

    m_axi_gmem1_AWADDR_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWADDR, ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln102_fu_643_p1)
    begin
        if ((not(((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done = ap_const_logic_0) or (m_axi_gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem1_AWADDR <= sext_ln102_fu_643_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWADDR <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWADDR;
        else 
            m_axi_gmem1_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_AWBURST_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWBURST, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWBURST <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWBURST;
        else 
            m_axi_gmem1_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_AWCACHE_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWCACHE, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWCACHE <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWCACHE;
        else 
            m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_AWID_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWID <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWID;
        else 
            m_axi_gmem1_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_AWLEN_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state5, zext_ln77_1_reg_703, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLEN, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((not(((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done = ap_const_logic_0) or (m_axi_gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem1_AWLEN <= zext_ln77_1_reg_703;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWLEN <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLEN;
        else 
            m_axi_gmem1_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_AWLOCK_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLOCK, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWLOCK <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWLOCK;
        else 
            m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_AWPROT_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWPROT, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWPROT <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWPROT;
        else 
            m_axi_gmem1_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_AWQOS_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWQOS, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWQOS <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWQOS;
        else 
            m_axi_gmem1_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_AWREGION_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWREGION, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWREGION <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWREGION;
        else 
            m_axi_gmem1_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_AWSIZE_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWSIZE, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWSIZE <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWSIZE;
        else 
            m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_AWUSER_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWUSER, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWUSER <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWUSER;
        else 
            m_axi_gmem1_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_AWVALID_assign_proc : process(m_axi_gmem1_AWREADY, ap_CS_fsm_state5, grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((not(((grp_PixelStream2AXIBursts_Pipeline_pixels2bytes_fu_219_ap_done = ap_const_logic_0) or (m_axi_gmem1_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_gmem1_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_AWVALID <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_AWVALID;
        else 
            m_axi_gmem1_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_BREADY_assign_proc : process(m_axi_gmem1_BVALID, ap_CS_fsm_state75, grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_BREADY, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) and (m_axi_gmem1_BVALID = ap_const_logic_1))) then 
            m_axi_gmem1_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_BREADY <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_BREADY;
        else 
            m_axi_gmem1_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WDATA;
    m_axi_gmem1_WID <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WID;
    m_axi_gmem1_WLAST <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WLAST;
    m_axi_gmem1_WSTRB <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WSTRB;
    m_axi_gmem1_WUSER <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WUSER;

    m_axi_gmem1_WVALID_assign_proc : process(grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WVALID, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_gmem1_WVALID <= grp_PixelStream2AXIBursts_Pipeline_bytes2aximm_fu_262_m_axi_gmem1_WVALID;
        else 
            m_axi_gmem1_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    remainPix_1_fu_339_p3 <= 
        ap_const_lv6_20 when (icmp_ln80_fu_334_p2(0) = '1') else 
        zext_ln79_fu_331_p1;
    remainPix_fu_279_p1 <= width_dout(5 - 1 downto 0);
        sext_ln102_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_886),64));

    shl_ln_fu_601_p3 <= (yoffset_fu_180 & ap_const_lv5_0);

    stride_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_blk_n <= stride_empty_n;
        else 
            stride_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stride_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_read <= ap_const_logic_1;
        else 
            stride_read <= ap_const_logic_0;
        end if; 
    end process;

    sub15_i_fu_347_p2 <= std_logic_vector(unsigned(loopWidth_reg_690) + unsigned(ap_const_lv12_FFF));
    tmp_1_fu_380_p4 <= remainPix_1_fu_339_p3(5 downto 2);
    tmp_2_fu_414_p4 <= remainPix_1_fu_339_p3(5 downto 3);
    tmp_3_fu_472_p4 <= remainPix_1_fu_339_p3(5 downto 4);
    tmp_fu_358_p4 <= remainPix_1_fu_339_p3(5 downto 1);
    trunc_ln90_1_fu_275_p1 <= height_dout(16 - 1 downto 0);
    trunc_ln90_fu_271_p1 <= width_dout(16 - 1 downto 0);

    width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_blk_n <= width_empty_n;
        else 
            width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_empty_n, height_empty_n, stride_empty_n, dst_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (dst_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (height_empty_n = ap_const_logic_0) or (width_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_read <= ap_const_logic_1;
        else 
            width_read <= ap_const_logic_0;
        end if; 
    end process;

    y_2_fu_589_p2 <= std_logic_vector(unsigned(y_fu_176) + unsigned(ap_const_lv16_1));
    zext_ln77_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopWidth_reg_690),32));
    zext_ln77_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln90_fu_271_p1),17));
    zext_ln79_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(remainPix_reg_684),6));
    zext_ln91_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_601_p3),64));
end behav;
