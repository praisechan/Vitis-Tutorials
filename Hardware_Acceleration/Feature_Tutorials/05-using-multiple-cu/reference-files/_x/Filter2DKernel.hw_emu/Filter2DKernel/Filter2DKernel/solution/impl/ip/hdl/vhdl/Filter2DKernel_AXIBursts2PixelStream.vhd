-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel_AXIBursts2PixelStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src : IN STD_LOGIC_VECTOR (63 downto 0);
    width : IN STD_LOGIC_VECTOR (31 downto 0);
    height : IN STD_LOGIC_VECTOR (31 downto 0);
    stride : IN STD_LOGIC_VECTOR (31 downto 0);
    src_pixels_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    src_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    src_pixels_full_n : IN STD_LOGIC;
    src_pixels_write : OUT STD_LOGIC;
    stride_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    stride_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    stride_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    stride_c_full_n : IN STD_LOGIC;
    stride_c_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of Filter2DKernel_AXIBursts2PixelStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv17_1F : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal stride_c_blk_n : STD_LOGIC;
    signal trunc_ln90_3_fu_276_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln90_3_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal loopWidth_fu_294_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal loopWidth_reg_675 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln25_1_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_1_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub31_i_fu_336_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub31_i_reg_691 : STD_LOGIC_VECTOR (11 downto 0);
    signal cmp34_i_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_i_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_2_i_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_2_i_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp19_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp19_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_4_i_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_4_i_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_5_i_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_5_i_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_6_i_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_6_i_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp22_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp22_reg_731 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_8_i_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_8_i_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_9_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_9_i_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_10_i_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_10_i_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_11_i_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_11_i_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_12_i_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_12_i_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_13_i_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_13_i_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_14_i_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_14_i_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp25_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp25_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_16_i_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_16_i_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_17_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_17_i_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_18_i_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_18_i_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_19_i_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_19_i_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_20_i_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_20_i_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_21_i_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_21_i_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_22_i_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_22_i_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_23_i_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_23_i_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_24_i_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_24_i_reg_816 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_25_i_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_25_i_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_26_i_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_26_i_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_27_i_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_27_i_reg_831 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_28_i_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_28_i_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_29_i_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_29_i_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_30_i_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp34_30_i_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal div14_cast_i_fu_568_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal div14_cast_i_reg_851 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln2_reg_859 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln33_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buff_V_ce0 : STD_LOGIC;
    signal buff_V_we0 : STD_LOGIC;
    signal buff_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_idle : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0 : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0 : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_idle : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0 : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n : STD_LOGIC;
    signal grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal sext_ln38_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_6_fu_590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal yoffset_fu_176 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln43_fu_626_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln90_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln25_fu_284_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln25_fu_288_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal remainPix_fu_280_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln27_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal remainPix_2_fu_318_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_348_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_370_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_404_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_462_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal div14_i_fu_326_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln38_fu_611_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_wait_1 : STD_LOGIC;
    signal ap_sub_ext_blocking_1 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_sub_str_blocking_1 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_sub_int_blocking_1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2DKernel_AXIBursts2PixelStream_Pipeline_aximm2bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln38 : IN STD_LOGIC_VECTOR (58 downto 0);
        loopWidth : IN STD_LOGIC_VECTOR (11 downto 0);
        buff_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buff_V_ce0 : OUT STD_LOGIC;
        buff_V_we0 : OUT STD_LOGIC;
        buff_V_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_AXIBursts2PixelStream_Pipeline_bytes2pixels IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_pixels_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_full_n : IN STD_LOGIC;
        src_pixels_write : OUT STD_LOGIC;
        loopWidth : IN STD_LOGIC_VECTOR (11 downto 0);
        icmp_ln28 : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_30_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_29_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_28_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_27_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_26_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_25_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_24_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_23_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_22_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_21_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_20_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_19_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_18_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_17_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_16_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_15_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_14_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_13_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_12_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_11_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_10_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_9_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_8_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_7_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_6_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_5_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_4_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_3_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_2_i : IN STD_LOGIC_VECTOR (0 downto 0);
        cmp34_1_i : IN STD_LOGIC_VECTOR (0 downto 0);
        buff_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buff_V_ce0 : OUT STD_LOGIC;
        buff_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        sext_ln33 : IN STD_LOGIC_VECTOR (11 downto 0);
        cmp34_i : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_AXIBursts2PixelStream_buff_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    buff_V_U : component Filter2DKernel_AXIBursts2PixelStream_buff_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_V_address0,
        ce0 => buff_V_ce0,
        we0 => buff_V_we0,
        d0 => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0,
        q0 => buff_V_q0);

    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222 : component Filter2DKernel_AXIBursts2PixelStream_Pipeline_aximm2bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start,
        ap_done => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done,
        ap_idle => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_idle,
        ap_ready => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready,
        m_axi_gmem0_AWVALID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        sext_ln38 => trunc_ln2_reg_859,
        loopWidth => loopWidth_reg_675,
        buff_V_address0 => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0,
        buff_V_ce0 => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0,
        buff_V_we0 => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0,
        buff_V_d0 => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_d0,
        ap_ext_blocking_n => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n,
        ap_str_blocking_n => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n,
        ap_int_blocking_n => grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n);

    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231 : component Filter2DKernel_AXIBursts2PixelStream_Pipeline_bytes2pixels
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start,
        ap_done => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done,
        ap_idle => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_idle,
        ap_ready => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready,
        src_pixels_din => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din,
        src_pixels_num_data_valid => ap_const_lv7_0,
        src_pixels_fifo_cap => ap_const_lv7_0,
        src_pixels_full_n => src_pixels_full_n,
        src_pixels_write => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write,
        loopWidth => loopWidth_reg_675,
        icmp_ln28 => icmp_ln28_reg_686,
        cmp34_30_i => cmp34_30_i_reg_846,
        cmp34_29_i => cmp34_29_i_reg_841,
        cmp34_28_i => cmp34_28_i_reg_836,
        cmp34_27_i => cmp34_27_i_reg_831,
        cmp34_26_i => cmp34_26_i_reg_826,
        cmp34_25_i => cmp34_25_i_reg_821,
        cmp34_24_i => cmp34_24_i_reg_816,
        cmp34_23_i => cmp34_23_i_reg_811,
        cmp34_22_i => cmp34_22_i_reg_806,
        cmp34_21_i => cmp34_21_i_reg_801,
        cmp34_20_i => cmp34_20_i_reg_796,
        cmp34_19_i => cmp34_19_i_reg_791,
        cmp34_18_i => cmp34_18_i_reg_786,
        cmp34_17_i => cmp34_17_i_reg_781,
        cmp34_16_i => cmp34_16_i_reg_776,
        cmp34_15_i => icmp25_reg_771,
        cmp34_14_i => cmp34_14_i_reg_766,
        cmp34_13_i => cmp34_13_i_reg_761,
        cmp34_12_i => cmp34_12_i_reg_756,
        cmp34_11_i => cmp34_11_i_reg_751,
        cmp34_10_i => cmp34_10_i_reg_746,
        cmp34_9_i => cmp34_9_i_reg_741,
        cmp34_8_i => cmp34_8_i_reg_736,
        cmp34_7_i => icmp22_reg_731,
        cmp34_6_i => cmp34_6_i_reg_726,
        cmp34_5_i => cmp34_5_i_reg_721,
        cmp34_4_i => cmp34_4_i_reg_716,
        cmp34_3_i => icmp19_reg_711,
        cmp34_2_i => cmp34_2_i_reg_706,
        cmp34_1_i => icmp_reg_701,
        buff_V_address0 => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0,
        buff_V_ce0 => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0,
        buff_V_q0 => buff_V_q0,
        sext_ln33 => sub31_i_reg_691,
        cmp34_i => cmp34_i_reg_696,
        ap_ext_blocking_n => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n,
        ap_str_blocking_n => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n,
        ap_int_blocking_n => grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln33_fu_585_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ready = ap_const_logic_1)) then 
                    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_172 <= ap_const_lv16_0;
            elsif (((icmp_ln33_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_fu_172 <= y_6_fu_590_p2;
            end if; 
        end if;
    end process;

    yoffset_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                yoffset_fu_176 <= ap_const_lv27_0;
            elsif (((icmp_ln33_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                yoffset_fu_176 <= add_ln43_fu_626_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cmp34_10_i_reg_746 <= cmp34_10_i_fu_432_p2;
                cmp34_11_i_reg_751 <= cmp34_11_i_fu_438_p2;
                cmp34_12_i_reg_756 <= cmp34_12_i_fu_444_p2;
                cmp34_13_i_reg_761 <= cmp34_13_i_fu_450_p2;
                cmp34_14_i_reg_766 <= cmp34_14_i_fu_456_p2;
                cmp34_16_i_reg_776 <= cmp34_16_i_fu_478_p2;
                cmp34_17_i_reg_781 <= cmp34_17_i_fu_484_p2;
                cmp34_18_i_reg_786 <= cmp34_18_i_fu_490_p2;
                cmp34_19_i_reg_791 <= cmp34_19_i_fu_496_p2;
                cmp34_20_i_reg_796 <= cmp34_20_i_fu_502_p2;
                cmp34_21_i_reg_801 <= cmp34_21_i_fu_508_p2;
                cmp34_22_i_reg_806 <= cmp34_22_i_fu_514_p2;
                cmp34_23_i_reg_811 <= cmp34_23_i_fu_520_p2;
                cmp34_24_i_reg_816 <= cmp34_24_i_fu_526_p2;
                cmp34_25_i_reg_821 <= cmp34_25_i_fu_532_p2;
                cmp34_26_i_reg_826 <= cmp34_26_i_fu_538_p2;
                cmp34_27_i_reg_831 <= cmp34_27_i_fu_544_p2;
                cmp34_28_i_reg_836 <= cmp34_28_i_fu_550_p2;
                cmp34_29_i_reg_841 <= cmp34_29_i_fu_556_p2;
                cmp34_2_i_reg_706 <= cmp34_2_i_fu_364_p2;
                cmp34_30_i_reg_846 <= cmp34_30_i_fu_562_p2;
                cmp34_4_i_reg_716 <= cmp34_4_i_fu_386_p2;
                cmp34_5_i_reg_721 <= cmp34_5_i_fu_392_p2;
                cmp34_6_i_reg_726 <= cmp34_6_i_fu_398_p2;
                cmp34_8_i_reg_736 <= cmp34_8_i_fu_420_p2;
                cmp34_9_i_reg_741 <= cmp34_9_i_fu_426_p2;
                cmp34_i_reg_696 <= cmp34_i_fu_342_p2;
                    div14_cast_i_reg_851(10 downto 0) <= div14_cast_i_fu_568_p1(10 downto 0);
                icmp19_reg_711 <= icmp19_fu_380_p2;
                icmp22_reg_731 <= icmp22_fu_414_p2;
                icmp25_reg_771 <= icmp25_fu_472_p2;
                icmp_ln28_reg_686 <= icmp_ln28_fu_312_p2;
                icmp_reg_701 <= icmp_fu_358_p2;
                loopWidth_reg_675 <= add_ln25_fu_288_p2(16 downto 5);
                sub31_i_reg_691 <= sub31_i_fu_336_p2;
                trunc_ln90_3_reg_670 <= trunc_ln90_3_fu_276_p1;
                    zext_ln25_1_reg_681(11 downto 0) <= zext_ln25_1_fu_304_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_585_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln2_reg_859 <= add_ln38_fu_611_p2(63 downto 5);
            end if;
        end if;
    end process;
    zext_ln25_1_reg_681(31 downto 12) <= "00000000000000000000";
    div14_cast_i_reg_851(26 downto 11) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem0_ARREADY, stride_c_full_n, ap_CS_fsm_state3, ap_CS_fsm_state2, icmp_ln33_fu_585_p2, grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done, grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done, ap_CS_fsm_state74, ap_CS_fsm_state76)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_585_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_gmem0_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_fu_288_p2 <= std_logic_vector(unsigned(zext_ln25_fu_284_p1) + unsigned(ap_const_lv17_1F));
    add_ln38_fu_611_p2 <= std_logic_vector(unsigned(zext_ln38_fu_607_p1) + unsigned(src));
    add_ln43_fu_626_p2 <= std_logic_vector(unsigned(div14_cast_i_reg_851) + unsigned(yoffset_fu_176));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, stride_c_full_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem0_ARREADY)
    begin
        if ((m_axi_gmem0_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;

    ap_ST_fsm_state74_blk_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state74_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state74_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, stride_c_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln33_fu_585_p2)
    begin
        if (((icmp_ln33_fu_585_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem0_blk_n_AR);
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0, ap_wait_1, ap_sub_ext_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_ext_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1))) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (stride_c_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_int_blocking_0, ap_sub_int_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_int_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1))) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_585_p2)
    begin
        if (((icmp_ln33_fu_585_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_sub_str_blocking_0, ap_sub_str_blocking_1)
    begin
        if ((((ap_wait_1 and ap_sub_str_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1))) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_ext_blocking_1_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_1_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_1_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n)
    begin
        if ((grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state74 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state76 = ap_CS_fsm)) then 
            ap_wait_1 <= ap_const_logic_1;
        else 
            ap_wait_1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_V_address0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0, grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0, ap_CS_fsm_state74, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            buff_V_address0 <= grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            buff_V_address0 <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_address0;
        else 
            buff_V_address0 <= "XXXXXX";
        end if; 
    end process;


    buff_V_ce0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0, grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0, ap_CS_fsm_state74, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            buff_V_ce0 <= grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_buff_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            buff_V_ce0 <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_ce0;
        else 
            buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_V_we0_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            buff_V_we0 <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_buff_V_we0;
        else 
            buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp34_10_i_fu_432_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_A)) else "0";
    cmp34_11_i_fu_438_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_B)) else "0";
    cmp34_12_i_fu_444_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_C)) else "0";
    cmp34_13_i_fu_450_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_D)) else "0";
    cmp34_14_i_fu_456_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_E)) else "0";
    cmp34_16_i_fu_478_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_10)) else "0";
    cmp34_17_i_fu_484_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_11)) else "0";
    cmp34_18_i_fu_490_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_12)) else "0";
    cmp34_19_i_fu_496_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_13)) else "0";
    cmp34_20_i_fu_502_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_14)) else "0";
    cmp34_21_i_fu_508_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_15)) else "0";
    cmp34_22_i_fu_514_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_16)) else "0";
    cmp34_23_i_fu_520_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_17)) else "0";
    cmp34_24_i_fu_526_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_18)) else "0";
    cmp34_25_i_fu_532_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_19)) else "0";
    cmp34_26_i_fu_538_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_1A)) else "0";
    cmp34_27_i_fu_544_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_1B)) else "0";
    cmp34_28_i_fu_550_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_1C)) else "0";
    cmp34_29_i_fu_556_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_1D)) else "0";
    cmp34_2_i_fu_364_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_2)) else "0";
    cmp34_30_i_fu_562_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_1E)) else "0";
    cmp34_4_i_fu_386_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_4)) else "0";
    cmp34_5_i_fu_392_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_5)) else "0";
    cmp34_6_i_fu_398_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_6)) else "0";
    cmp34_8_i_fu_420_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_8)) else "0";
    cmp34_9_i_fu_426_p2 <= "1" when (unsigned(remainPix_2_fu_318_p3) > unsigned(ap_const_lv6_9)) else "0";
    cmp34_i_fu_342_p2 <= "0" when (remainPix_2_fu_318_p3 = ap_const_lv6_0) else "1";
    div14_cast_i_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div14_i_fu_326_p4),27));
    div14_i_fu_326_p4 <= stride(15 downto 5);

    gmem0_blk_n_AR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_ap_start_reg;
    grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start <= grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_ap_start_reg;
    icmp19_fu_380_p2 <= "0" when (tmp_9_fu_370_p4 = ap_const_lv4_0) else "1";
    icmp22_fu_414_p2 <= "0" when (tmp_10_fu_404_p4 = ap_const_lv3_0) else "1";
    icmp25_fu_472_p2 <= "0" when (tmp_11_fu_462_p4 = ap_const_lv2_0) else "1";
    icmp_fu_358_p2 <= "0" when (tmp_fu_348_p4 = ap_const_lv5_0) else "1";
    icmp_ln28_fu_312_p2 <= "1" when (remainPix_fu_280_p1 = ap_const_lv5_0) else "0";
    icmp_ln33_fu_585_p2 <= "1" when (y_fu_172 = trunc_ln90_3_reg_670) else "0";
    loopWidth_fu_294_p4 <= add_ln25_fu_288_p2(16 downto 5);

    m_axi_gmem0_ARADDR_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR, ap_CS_fsm_state73, ap_CS_fsm_state74, sext_ln38_fu_641_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_gmem0_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem0_ARADDR <= sext_ln38_fu_641_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARADDR <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARADDR;
        else 
            m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARBURST_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARBURST <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARBURST;
        else 
            m_axi_gmem0_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem0_ARCACHE_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARCACHE <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARCACHE;
        else 
            m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARID_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARID <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARID;
        else 
            m_axi_gmem0_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem0_ARLEN_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, zext_ln25_1_reg_681, grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_gmem0_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem0_ARLEN <= zext_ln25_1_reg_681;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARLEN <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLEN;
        else 
            m_axi_gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARLOCK_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARLOCK <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARLOCK;
        else 
            m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem0_ARPROT_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARPROT <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARPROT;
        else 
            m_axi_gmem0_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem0_ARQOS_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARQOS <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARQOS;
        else 
            m_axi_gmem0_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARREGION_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARREGION <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARREGION;
        else 
            m_axi_gmem0_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARSIZE_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARSIZE <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARSIZE;
        else 
            m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem0_ARUSER_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARUSER <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARUSER;
        else 
            m_axi_gmem0_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem0_ARVALID_assign_proc : process(m_axi_gmem0_ARREADY, ap_CS_fsm_state3, grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_gmem0_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_ARVALID <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_ARVALID;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            m_axi_gmem0_RREADY <= grp_AXIBursts2PixelStream_Pipeline_aximm2bytes_fu_222_m_axi_gmem0_RREADY;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv256_lc_1;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv32_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    remainPix_2_fu_318_p3 <= 
        ap_const_lv6_20 when (icmp_ln28_fu_312_p2(0) = '1') else 
        zext_ln27_fu_308_p1;
    remainPix_fu_280_p1 <= width(5 - 1 downto 0);
        sext_ln38_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_859),64));

    shl_ln_fu_599_p3 <= (yoffset_fu_176 & ap_const_lv5_0);
    src_pixels_din <= grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_din;

    src_pixels_write_assign_proc : process(grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            src_pixels_write <= grp_AXIBursts2PixelStream_Pipeline_bytes2pixels_fu_231_src_pixels_write;
        else 
            src_pixels_write <= ap_const_logic_0;
        end if; 
    end process;


    stride_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_c_blk_n <= stride_c_full_n;
        else 
            stride_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stride_c_din <= stride;

    stride_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (stride_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_c_write <= ap_const_logic_1;
        else 
            stride_c_write <= ap_const_logic_0;
        end if; 
    end process;

    sub31_i_fu_336_p2 <= std_logic_vector(unsigned(loopWidth_fu_294_p4) + unsigned(ap_const_lv12_FFF));
    tmp_10_fu_404_p4 <= remainPix_2_fu_318_p3(5 downto 3);
    tmp_11_fu_462_p4 <= remainPix_2_fu_318_p3(5 downto 4);
    tmp_9_fu_370_p4 <= remainPix_2_fu_318_p3(5 downto 2);
    tmp_fu_348_p4 <= remainPix_2_fu_318_p3(5 downto 1);
    trunc_ln90_3_fu_276_p1 <= height(16 - 1 downto 0);
    trunc_ln90_fu_272_p1 <= width(16 - 1 downto 0);
    y_6_fu_590_p2 <= std_logic_vector(unsigned(y_fu_172) + unsigned(ap_const_lv16_1));
    zext_ln25_1_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loopWidth_fu_294_p4),32));
    zext_ln25_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln90_fu_272_p1),17));
    zext_ln27_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(remainPix_fu_280_p1),6));
    zext_ln38_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_599_p3),64));
end behav;
