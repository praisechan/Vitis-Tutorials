-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Filter2DKernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of Filter2DKernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Filter2DKernel_Filter2DKernel,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=31,HLS_SYN_DSP=0,HLS_SYN_FF=26068,HLS_SYN_LUT=24268,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal coeffs : STD_LOGIC_VECTOR (63 downto 0);
    signal src : STD_LOGIC_VECTOR (63 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal stride : STD_LOGIC_VECTOR (31 downto 0);
    signal dst : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_dst_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_dst_c_write : STD_LOGIC;
    signal entry_proc_U0_ap_ext_blocking_n : STD_LOGIC;
    signal entry_proc_U0_ap_str_blocking_n : STD_LOGIC;
    signal entry_proc_U0_ap_int_blocking_n : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_start : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_done : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_continue : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_idle : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_ready : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_src_pixels_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIBursts2PixelStream_U0_src_pixels_write : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_stride_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal AXIBursts2PixelStream_U0_stride_c_write : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_ext_blocking_n : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_str_blocking_n : STD_LOGIC;
    signal AXIBursts2PixelStream_U0_ap_int_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_start : STD_LOGIC;
    signal Filter2D_U0_ap_done : STD_LOGIC;
    signal Filter2D_U0_ap_continue : STD_LOGIC;
    signal Filter2D_U0_ap_idle : STD_LOGIC;
    signal Filter2D_U0_ap_ready : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal Filter2D_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Filter2D_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Filter2D_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal Filter2D_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal Filter2D_U0_src_pixels_read : STD_LOGIC;
    signal Filter2D_U0_dst_pixels_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Filter2D_U0_dst_pixels_write : STD_LOGIC;
    signal Filter2D_U0_width_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_width_c_write : STD_LOGIC;
    signal Filter2D_U0_height_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Filter2D_U0_height_c_write : STD_LOGIC;
    signal Filter2D_U0_ap_ext_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_str_blocking_n : STD_LOGIC;
    signal Filter2D_U0_ap_int_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_start : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_done : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_continue : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_idle : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_ready : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_dst_pixels_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_width_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_height_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_stride_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_dst_read : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_ext_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_str_blocking_n : STD_LOGIC;
    signal PixelStream2AXIBursts_U0_ap_int_blocking_n : STD_LOGIC;
    signal dst_c_full_n : STD_LOGIC;
    signal dst_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal dst_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal dst_c_empty_n : STD_LOGIC;
    signal src_pixels_full_n : STD_LOGIC;
    signal src_pixels_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_pixels_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal src_pixels_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal src_pixels_empty_n : STD_LOGIC;
    signal stride_c_full_n : STD_LOGIC;
    signal stride_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal stride_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal stride_c_empty_n : STD_LOGIC;
    signal dst_pixels_full_n : STD_LOGIC;
    signal dst_pixels_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_pixels_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal dst_pixels_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal dst_pixels_empty_n : STD_LOGIC;
    signal width_c_full_n : STD_LOGIC;
    signal width_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal width_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal width_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal width_c_empty_n : STD_LOGIC;
    signal height_c_full_n : STD_LOGIC;
    signal height_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal height_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal height_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIBursts2PixelStream_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Filter2D_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Filter2D_U0_ap_ready : STD_LOGIC;
    signal start_for_PixelStream2AXIBursts_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PixelStream2AXIBursts_U0_full_n : STD_LOGIC;
    signal start_for_PixelStream2AXIBursts_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_PixelStream2AXIBursts_U0_empty_n : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Filter2DKernel_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        dst : IN STD_LOGIC_VECTOR (63 downto 0);
        dst_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        dst_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        dst_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        dst_c_full_n : IN STD_LOGIC;
        dst_c_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_AXIBursts2PixelStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src : IN STD_LOGIC_VECTOR (63 downto 0);
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        stride : IN STD_LOGIC_VECTOR (31 downto 0);
        src_pixels_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_full_n : IN STD_LOGIC;
        src_pixels_write : OUT STD_LOGIC;
        stride_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        stride_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        stride_c_full_n : IN STD_LOGIC;
        stride_c_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        coeffs : IN STD_LOGIC_VECTOR (63 downto 0);
        src_pixels_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        src_pixels_empty_n : IN STD_LOGIC;
        src_pixels_read : OUT STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (31 downto 0);
        height : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_pixels_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_full_n : IN STD_LOGIC;
        dst_pixels_write : OUT STD_LOGIC;
        width_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        width_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        width_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        width_c_full_n : IN STD_LOGIC;
        width_c_write : OUT STD_LOGIC;
        height_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        height_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        height_c_full_n : IN STD_LOGIC;
        height_c_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_PixelStream2AXIBursts IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dst_pixels_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        dst_pixels_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        dst_pixels_empty_n : IN STD_LOGIC;
        dst_pixels_read : OUT STD_LOGIC;
        width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        width_empty_n : IN STD_LOGIC;
        width_read : OUT STD_LOGIC;
        height_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        height_empty_n : IN STD_LOGIC;
        height_read : OUT STD_LOGIC;
        stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        stride_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        stride_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        stride_empty_n : IN STD_LOGIC;
        stride_read : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        dst_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        dst_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        dst_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        dst_empty_n : IN STD_LOGIC;
        dst_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w8_d64_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_start_for_PixelStream2AXIBursts_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Filter2DKernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        coeffs : OUT STD_LOGIC_VECTOR (63 downto 0);
        src : OUT STD_LOGIC_VECTOR (63 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        stride : OUT STD_LOGIC_VECTOR (31 downto 0);
        dst : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Filter2DKernel_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component Filter2DKernel_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Filter2DKernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        coeffs => coeffs,
        src => src,
        width => width,
        height => height,
        stride => stride,
        dst => dst,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component Filter2DKernel_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXIBursts2PixelStream_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => AXIBursts2PixelStream_U0_m_axi_gmem0_ARADDR,
        I_ARLEN => AXIBursts2PixelStream_U0_m_axi_gmem0_ARLEN,
        I_RVALID => gmem0_RVALID,
        I_RREADY => AXIBursts2PixelStream_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RFIFONUM => gmem0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component Filter2DKernel_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 69,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Filter2D_U0_m_axi_gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => Filter2D_U0_m_axi_gmem1_ARADDR,
        I_ARLEN => Filter2D_U0_m_axi_gmem1_ARLEN,
        I_RVALID => gmem1_RVALID,
        I_RREADY => Filter2D_U0_m_axi_gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RFIFONUM => gmem1_RFIFONUM,
        I_AWVALID => PixelStream2AXIBursts_U0_m_axi_gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => PixelStream2AXIBursts_U0_m_axi_gmem1_AWADDR,
        I_AWLEN => PixelStream2AXIBursts_U0_m_axi_gmem1_AWLEN,
        I_WVALID => PixelStream2AXIBursts_U0_m_axi_gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => PixelStream2AXIBursts_U0_m_axi_gmem1_WDATA,
        I_WSTRB => PixelStream2AXIBursts_U0_m_axi_gmem1_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => PixelStream2AXIBursts_U0_m_axi_gmem1_BREADY);

    entry_proc_U0 : component Filter2DKernel_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_PixelStream2AXIBursts_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        dst => dst,
        dst_c_din => entry_proc_U0_dst_c_din,
        dst_c_num_data_valid => dst_c_num_data_valid,
        dst_c_fifo_cap => dst_c_fifo_cap,
        dst_c_full_n => dst_c_full_n,
        dst_c_write => entry_proc_U0_dst_c_write,
        ap_ext_blocking_n => entry_proc_U0_ap_ext_blocking_n,
        ap_str_blocking_n => entry_proc_U0_ap_str_blocking_n,
        ap_int_blocking_n => entry_proc_U0_ap_int_blocking_n);

    AXIBursts2PixelStream_U0 : component Filter2DKernel_AXIBursts2PixelStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIBursts2PixelStream_U0_ap_start,
        ap_done => AXIBursts2PixelStream_U0_ap_done,
        ap_continue => AXIBursts2PixelStream_U0_ap_continue,
        ap_idle => AXIBursts2PixelStream_U0_ap_idle,
        ap_ready => AXIBursts2PixelStream_U0_ap_ready,
        m_axi_gmem0_AWVALID => AXIBursts2PixelStream_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => AXIBursts2PixelStream_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => AXIBursts2PixelStream_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => AXIBursts2PixelStream_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => AXIBursts2PixelStream_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => AXIBursts2PixelStream_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => AXIBursts2PixelStream_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => AXIBursts2PixelStream_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => AXIBursts2PixelStream_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => AXIBursts2PixelStream_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => AXIBursts2PixelStream_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => AXIBursts2PixelStream_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => AXIBursts2PixelStream_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => AXIBursts2PixelStream_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => AXIBursts2PixelStream_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => AXIBursts2PixelStream_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => AXIBursts2PixelStream_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => AXIBursts2PixelStream_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => AXIBursts2PixelStream_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => AXIBursts2PixelStream_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => AXIBursts2PixelStream_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => AXIBursts2PixelStream_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => AXIBursts2PixelStream_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => AXIBursts2PixelStream_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => AXIBursts2PixelStream_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => AXIBursts2PixelStream_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => AXIBursts2PixelStream_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => AXIBursts2PixelStream_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => AXIBursts2PixelStream_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => AXIBursts2PixelStream_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => AXIBursts2PixelStream_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RFIFONUM => gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => AXIBursts2PixelStream_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        src => src,
        width => width,
        height => height,
        stride => stride,
        src_pixels_din => AXIBursts2PixelStream_U0_src_pixels_din,
        src_pixels_num_data_valid => src_pixels_num_data_valid,
        src_pixels_fifo_cap => src_pixels_fifo_cap,
        src_pixels_full_n => src_pixels_full_n,
        src_pixels_write => AXIBursts2PixelStream_U0_src_pixels_write,
        stride_c_din => AXIBursts2PixelStream_U0_stride_c_din,
        stride_c_num_data_valid => stride_c_num_data_valid,
        stride_c_fifo_cap => stride_c_fifo_cap,
        stride_c_full_n => stride_c_full_n,
        stride_c_write => AXIBursts2PixelStream_U0_stride_c_write,
        ap_ext_blocking_n => AXIBursts2PixelStream_U0_ap_ext_blocking_n,
        ap_str_blocking_n => AXIBursts2PixelStream_U0_ap_str_blocking_n,
        ap_int_blocking_n => AXIBursts2PixelStream_U0_ap_int_blocking_n);

    Filter2D_U0 : component Filter2DKernel_Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Filter2D_U0_ap_start,
        ap_done => Filter2D_U0_ap_done,
        ap_continue => Filter2D_U0_ap_continue,
        ap_idle => Filter2D_U0_ap_idle,
        ap_ready => Filter2D_U0_ap_ready,
        m_axi_gmem1_AWVALID => Filter2D_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => Filter2D_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => Filter2D_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => Filter2D_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => Filter2D_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => Filter2D_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => Filter2D_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => Filter2D_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => Filter2D_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => Filter2D_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => Filter2D_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => Filter2D_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => Filter2D_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => Filter2D_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => Filter2D_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => Filter2D_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => Filter2D_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => Filter2D_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => Filter2D_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => Filter2D_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => Filter2D_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => Filter2D_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => Filter2D_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => Filter2D_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => Filter2D_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => Filter2D_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => Filter2D_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => Filter2D_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => Filter2D_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => Filter2D_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => Filter2D_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RFIFONUM => gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => Filter2D_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        coeffs => coeffs,
        src_pixels_dout => src_pixels_dout,
        src_pixels_num_data_valid => src_pixels_num_data_valid,
        src_pixels_fifo_cap => src_pixels_fifo_cap,
        src_pixels_empty_n => src_pixels_empty_n,
        src_pixels_read => Filter2D_U0_src_pixels_read,
        width => width,
        height => height,
        dst_pixels_din => Filter2D_U0_dst_pixels_din,
        dst_pixels_num_data_valid => dst_pixels_num_data_valid,
        dst_pixels_fifo_cap => dst_pixels_fifo_cap,
        dst_pixels_full_n => dst_pixels_full_n,
        dst_pixels_write => Filter2D_U0_dst_pixels_write,
        width_c_din => Filter2D_U0_width_c_din,
        width_c_num_data_valid => width_c_num_data_valid,
        width_c_fifo_cap => width_c_fifo_cap,
        width_c_full_n => width_c_full_n,
        width_c_write => Filter2D_U0_width_c_write,
        height_c_din => Filter2D_U0_height_c_din,
        height_c_num_data_valid => height_c_num_data_valid,
        height_c_fifo_cap => height_c_fifo_cap,
        height_c_full_n => height_c_full_n,
        height_c_write => Filter2D_U0_height_c_write,
        ap_ext_blocking_n => Filter2D_U0_ap_ext_blocking_n,
        ap_str_blocking_n => Filter2D_U0_ap_str_blocking_n,
        ap_int_blocking_n => Filter2D_U0_ap_int_blocking_n);

    PixelStream2AXIBursts_U0 : component Filter2DKernel_PixelStream2AXIBursts
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => PixelStream2AXIBursts_U0_ap_start,
        ap_done => PixelStream2AXIBursts_U0_ap_done,
        ap_continue => PixelStream2AXIBursts_U0_ap_continue,
        ap_idle => PixelStream2AXIBursts_U0_ap_idle,
        ap_ready => PixelStream2AXIBursts_U0_ap_ready,
        dst_pixels_dout => dst_pixels_dout,
        dst_pixels_num_data_valid => dst_pixels_num_data_valid,
        dst_pixels_fifo_cap => dst_pixels_fifo_cap,
        dst_pixels_empty_n => dst_pixels_empty_n,
        dst_pixels_read => PixelStream2AXIBursts_U0_dst_pixels_read,
        width_dout => width_c_dout,
        width_num_data_valid => width_c_num_data_valid,
        width_fifo_cap => width_c_fifo_cap,
        width_empty_n => width_c_empty_n,
        width_read => PixelStream2AXIBursts_U0_width_read,
        height_dout => height_c_dout,
        height_num_data_valid => height_c_num_data_valid,
        height_fifo_cap => height_c_fifo_cap,
        height_empty_n => height_c_empty_n,
        height_read => PixelStream2AXIBursts_U0_height_read,
        stride_dout => stride_c_dout,
        stride_num_data_valid => stride_c_num_data_valid,
        stride_fifo_cap => stride_c_fifo_cap,
        stride_empty_n => stride_c_empty_n,
        stride_read => PixelStream2AXIBursts_U0_stride_read,
        m_axi_gmem1_AWVALID => PixelStream2AXIBursts_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => gmem1_AWREADY,
        m_axi_gmem1_AWADDR => PixelStream2AXIBursts_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => PixelStream2AXIBursts_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => PixelStream2AXIBursts_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => PixelStream2AXIBursts_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => PixelStream2AXIBursts_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => PixelStream2AXIBursts_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => PixelStream2AXIBursts_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => PixelStream2AXIBursts_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => PixelStream2AXIBursts_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => PixelStream2AXIBursts_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => PixelStream2AXIBursts_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => PixelStream2AXIBursts_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => gmem1_WREADY,
        m_axi_gmem1_WDATA => PixelStream2AXIBursts_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => PixelStream2AXIBursts_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => PixelStream2AXIBursts_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => PixelStream2AXIBursts_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => PixelStream2AXIBursts_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => PixelStream2AXIBursts_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => PixelStream2AXIBursts_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => PixelStream2AXIBursts_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => PixelStream2AXIBursts_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => PixelStream2AXIBursts_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => PixelStream2AXIBursts_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => PixelStream2AXIBursts_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => PixelStream2AXIBursts_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => PixelStream2AXIBursts_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => PixelStream2AXIBursts_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => PixelStream2AXIBursts_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => PixelStream2AXIBursts_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => PixelStream2AXIBursts_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv256_lc_1,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => gmem1_BVALID,
        m_axi_gmem1_BREADY => PixelStream2AXIBursts_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => gmem1_BRESP,
        m_axi_gmem1_BID => gmem1_BID,
        m_axi_gmem1_BUSER => gmem1_BUSER,
        dst_dout => dst_c_dout,
        dst_num_data_valid => dst_c_num_data_valid,
        dst_fifo_cap => dst_c_fifo_cap,
        dst_empty_n => dst_c_empty_n,
        dst_read => PixelStream2AXIBursts_U0_dst_read,
        ap_ext_blocking_n => PixelStream2AXIBursts_U0_ap_ext_blocking_n,
        ap_str_blocking_n => PixelStream2AXIBursts_U0_ap_str_blocking_n,
        ap_int_blocking_n => PixelStream2AXIBursts_U0_ap_int_blocking_n);

    dst_c_U : component Filter2DKernel_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_dst_c_din,
        if_full_n => dst_c_full_n,
        if_write => entry_proc_U0_dst_c_write,
        if_dout => dst_c_dout,
        if_num_data_valid => dst_c_num_data_valid,
        if_fifo_cap => dst_c_fifo_cap,
        if_empty_n => dst_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_dst_read);

    src_pixels_U : component Filter2DKernel_fifo_w8_d64_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream_U0_src_pixels_din,
        if_full_n => src_pixels_full_n,
        if_write => AXIBursts2PixelStream_U0_src_pixels_write,
        if_dout => src_pixels_dout,
        if_num_data_valid => src_pixels_num_data_valid,
        if_fifo_cap => src_pixels_fifo_cap,
        if_empty_n => src_pixels_empty_n,
        if_read => Filter2D_U0_src_pixels_read);

    stride_c_U : component Filter2DKernel_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIBursts2PixelStream_U0_stride_c_din,
        if_full_n => stride_c_full_n,
        if_write => AXIBursts2PixelStream_U0_stride_c_write,
        if_dout => stride_c_dout,
        if_num_data_valid => stride_c_num_data_valid,
        if_fifo_cap => stride_c_fifo_cap,
        if_empty_n => stride_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_stride_read);

    dst_pixels_U : component Filter2DKernel_fifo_w8_d64_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_dst_pixels_din,
        if_full_n => dst_pixels_full_n,
        if_write => Filter2D_U0_dst_pixels_write,
        if_dout => dst_pixels_dout,
        if_num_data_valid => dst_pixels_num_data_valid,
        if_fifo_cap => dst_pixels_fifo_cap,
        if_empty_n => dst_pixels_empty_n,
        if_read => PixelStream2AXIBursts_U0_dst_pixels_read);

    width_c_U : component Filter2DKernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_width_c_din,
        if_full_n => width_c_full_n,
        if_write => Filter2D_U0_width_c_write,
        if_dout => width_c_dout,
        if_num_data_valid => width_c_num_data_valid,
        if_fifo_cap => width_c_fifo_cap,
        if_empty_n => width_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_width_read);

    height_c_U : component Filter2DKernel_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Filter2D_U0_height_c_din,
        if_full_n => height_c_full_n,
        if_write => Filter2D_U0_height_c_write,
        if_dout => height_c_dout,
        if_num_data_valid => height_c_num_data_valid,
        if_fifo_cap => height_c_fifo_cap,
        if_empty_n => height_c_empty_n,
        if_read => PixelStream2AXIBursts_U0_height_read);

    start_for_PixelStream2AXIBursts_U0_U : component Filter2DKernel_start_for_PixelStream2AXIBursts_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_PixelStream2AXIBursts_U0_din,
        if_full_n => start_for_PixelStream2AXIBursts_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_PixelStream2AXIBursts_U0_dout,
        if_empty_n => start_for_PixelStream2AXIBursts_U0_empty_n,
        if_read => PixelStream2AXIBursts_U0_ap_ready);





    ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready <= ap_sync_AXIBursts2PixelStream_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Filter2D_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Filter2D_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Filter2D_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Filter2D_U0_ap_ready <= ap_sync_Filter2D_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    AXIBursts2PixelStream_U0_ap_continue <= ap_const_logic_1;
    AXIBursts2PixelStream_U0_ap_start <= ((ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Filter2D_U0_ap_continue <= ap_const_logic_1;
    Filter2D_U0_ap_start <= ((ap_sync_reg_Filter2D_U0_ap_ready xor ap_const_logic_1) and ap_start);
    PixelStream2AXIBursts_U0_ap_continue <= ap_continue;
    PixelStream2AXIBursts_U0_ap_start <= start_for_PixelStream2AXIBursts_U0_empty_n;
    ap_done <= PixelStream2AXIBursts_U0_ap_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (entry_proc_U0_ap_ext_blocking_n and PixelStream2AXIBursts_U0_ap_ext_blocking_n and Filter2D_U0_ap_ext_blocking_n and AXIBursts2PixelStream_U0_ap_ext_blocking_n);
    ap_idle <= (entry_proc_U0_ap_idle and PixelStream2AXIBursts_U0_ap_idle and Filter2D_U0_ap_idle and AXIBursts2PixelStream_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (entry_proc_U0_ap_int_blocking_n and PixelStream2AXIBursts_U0_ap_int_blocking_n and Filter2D_U0_ap_int_blocking_n and AXIBursts2PixelStream_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (entry_proc_U0_ap_str_blocking_n and PixelStream2AXIBursts_U0_ap_str_blocking_n and Filter2D_U0_ap_str_blocking_n and AXIBursts2PixelStream_U0_ap_str_blocking_n);
    ap_sync_AXIBursts2PixelStream_U0_ap_ready <= (ap_sync_reg_AXIBursts2PixelStream_U0_ap_ready or AXIBursts2PixelStream_U0_ap_ready);
    ap_sync_Filter2D_U0_ap_ready <= (ap_sync_reg_Filter2D_U0_ap_ready or Filter2D_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_Filter2D_U0_ap_ready and ap_sync_AXIBursts2PixelStream_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    event_done <= ap_done;
    gmem0_RID <= ap_const_lv1_0;
    gmem0_RLAST <= ap_const_logic_0;
    gmem0_RRESP <= ap_const_lv2_0;
    gmem0_RUSER <= ap_const_lv1_0;
    gmem1_BID <= ap_const_lv1_0;
    gmem1_BRESP <= ap_const_lv2_0;
    gmem1_BUSER <= ap_const_lv1_0;
    gmem1_RID <= ap_const_lv1_0;
    gmem1_RLAST <= ap_const_logic_0;
    gmem1_RRESP <= ap_const_lv2_0;
    gmem1_RUSER <= ap_const_lv1_0;

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    start_for_PixelStream2AXIBursts_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
